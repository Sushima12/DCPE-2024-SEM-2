#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "library.h"

#define LEDPort 0x32
#define LCDPort 0x33
#define KbdPort 0x34
#define SMPort   0x31  // Stepper motor port
#define NumSteps 200
#define PtableLen 4

unsigned char Ptable[] = {0x03, 0x06, 0x0C, 0x09};

unsigned char ScanKey();
unsigned char ProcKey();

const unsigned char ScanTable[12] = {
    0xB7, 0x7E, 0xBE, 0xDE,
    0x7D, 0xBD, 0xDD, 0x7B,
    0xBB, 0xDB, 0x77, 0xD7
};

unsigned char ScanCode;

#define Col7Lo 0xF7
#define Col6Lo 0xFB
#define Col5Lo 0xFD
#define Col4Lo 0xFE

static void initlcd();
static void lcd_writecmd(char cmd);
static void LCDprint(const char *sptr);
static void lcddata(unsigned char cmd);

void displayMainMenu();
int selectDrink();
void configureOptions();
void brewingProcess();
void tempselection();
void milkselection();
void motor();

int main(int argc, char *argv[]) {
    system("killall pqiv");
    CM3DeviceInit();

    while (1) {
        displayMainMenu();
        int selectedDrink = selectDrink();
        if (selectedDrink != -1) {
            if (selectedDrink == 1 || selectedDrink == 2 || selectedDrink == 6) {
                configureOptions();
                milkselection();
            }
            if (selectedDrink == 5 || selectedDrink == 8) {
                tempselection();
            }
            brewingProcess();
        }
    }

    CM3DeviceDeInit();
    return 0;
}

void displayMainMenu() {
    initlcd();
    system("DISPLAY=:0.0 pqiv -f /tmp/pageselection.png &");

    lcd_writecmd(0x80);
    LCDprint("Choose a drink");
    lcd_writecmd(0xC0);
    LCDprint("1-9 to select");
}

char selectedDrink[20] = "None";
int sugarLevel = 2;  // 0 for no sugar, 1 for less sugar, 2 for normal sugar
int milkAdded = 0;
char *temperature = "Normal";

int selectDrink() {
    unsigned char selectedDrinkKey = 0xFF;
    const char *drinkNames[] = {
        "Nespresso", "Lipton", "Milo", "Cadbury", "Milk",
        "Starbucks", "Orange juice", "Evian", "Ovaltine"
    };

    while (1) {
        unsigned char key = ScanKey();
        if (key >= '1' && key <= '9') {
            selectedDrinkKey = key - '1';
            lcd_writecmd(0x01);
            LCDprint(drinkNames[selectedDrinkKey]);
            char confirMessage[17];
            snprintf(confirMessage,sizeof(confirMessage),"Press %c to re-sel",key);
            lcd_writecmd(0xC0);
            LCDprint(confirMessage);
            usleep(200000);

            while (1) {
                unsigned char confirmKey = ScanKey();
                if (confirmKey == key) {
                    strcpy(selectedDrink, drinkNames[selectedDrinkKey]);
                    return selectedDrinkKey + 1;
                }
                if (confirmKey == '0') {
                    return -1;
                }
                usleep(50000);
            }
        }
        usleep(50000);
    }
}

void tempselection() {
    temperature = "Normal";
    system("DISPLAY=:0.0 pqiv -f /tmp/temp.png &");

    lcd_writecmd(0x01);
    LCDprint("1:Hot   2:cold ");
    lcd_writecmd(0xC0);
    LCDprint("3:Normal");
    usleep(200000);

    while (1) {
        unsigned char configKeya = ScanKey();
        if (configKeya == '1') {
            temperature = "Hot";
            break;
        }
        if (configKeya == '2') {
            temperature = "Cold";
            break;
        }
        if (configKeya == '3') {
            temperature = "Normal";
            break;
        }
        usleep(50000);
    }
}

void configureOptions() {
    system("DISPLAY=:0.0 pqiv -f /tmp/sugar.png &");
    lcd_writecmd(0x01);
    LCDprint("Sugar: 1- None 2- Less");
    lcd_writecmd(0xC0);
    LCDprint("3- Normal");
    usleep(200000);

    while (1) {
        unsigned char configKey = ScanKey();
        if (configKey == '1') {
            sugarLevel = 0;  // No sugar
            break;
        }
        if (configKey == '2') {
            sugarLevel = 1;  // Less sugar
            break;
        }
        if (configKey == '3') {
            sugarLevel = 2;  // Normal sugar
            break;
        }
        usleep(50000);
    }
}

void milkselection() {
    system("DISPLAY=:0.0 pqiv -f /tmp/mik.png &");
    lcd_writecmd(0x01);
    LCDprint("Add milk? 1-yes,0-no");
    usleep(200000);
    milkAdded = 0;
    while (1) {
        unsigned char milkKey = ScanKey();
        if (milkKey == '1') {
            milkAdded = 1;
            break;
        }
        if (milkKey == '0') {
            milkAdded = 0;
            break;
        }
        usleep(50000);
    }
}

void brewingProcess() {
    lcd_writecmd(0x01);  // Clear the LCD

    char brewMessage[64] = "Brewing ";
    strncat(brewMessage, selectedDrink, sizeof(brewMessage) - strlen(brewMessage) - 1);

    // Append relevant options for specific drinks
    if (strcmp(selectedDrink, "Nespresso") == 0 || strcmp(selectedDrink, "Lipton") == 0 || strcmp(selectedDrink, "Starbucks") == 0) {
        if (milkAdded) {
            strncat(brewMessage, " w/ milk", sizeof(brewMessage) - strlen(brewMessage) - 1);
        } else {
            strncat(brewMessage, " w/o milk", sizeof(brewMessage) - strlen(brewMessage) - 1);
        }

        switch (sugarLevel) {
            case 0:
                strncat(brewMessage, " no sugar", sizeof(brewMessage) - strlen(brewMessage) - 1);
                break;
            case 1:
                strncat(brewMessage, " less sugar", sizeof(brewMessage) - strlen(brewMessage) - 1);
                break;
            case 2:
                strncat(brewMessage, " normal sugar", sizeof(brewMessage) - strlen(brewMessage) - 1);
                break;
        }
    }

    if (strcmp(selectedDrink, "Milk") == 0 || strcmp(selectedDrink, "Water") == 0) {
        if (strcmp(temperature, "Normal") != 0) {
            strncat(brewMessage, " ", sizeof(brewMessage) - strlen(brewMessage) - 1);
            strncat(brewMessage, temperature, sizeof(brewMessage) - strlen(brewMessage) - 1);
        }
    }

    int messageLength = strlen(brewMessage);
    int displayWidth = 16;

    char displayMessage[17] = {0}; // Buffer to hold the string to display

    if (messageLength > displayWidth) {
        for (int offset = 0; offset <= messageLength - displayWidth; ++offset) {
            strncpy(displayMessage, &brewMessage[offset], displayWidth);
            displayMessage[displayWidth] = '\0'; // Null-terminate the string
            lcd_writecmd(0x01); // Clear LCD
            LCDprint(displayMessage);
            usleep(500000); // Adjust for scrolling speed
        }
    } else {
        LCDprint(brewMessage);
    }

    usleep(1500000);

    lcd_writecmd(0x01);
    LCDprint("Brewing...");

    system("DISPLAY=:0.0 pqiv -f /tmp/page2loading.png &");
    motor();

    lcd_writecmd(0x01);
    LCDprint("Enjoy your drink!");
    system("DISPLAY=:0.0 pqiv -f /tmp/page3thanks.png &");
    usleep(5000000);
    system("killall pqiv");
}
     void motor(){
    int i,j;
    i=0;
	for (j=NumSteps;j>0;j--)
	{
		CM3_outport(SMPort, Ptable[i]);	/* output to stepper motor */
		usleep(10000);                  /* delay */
		i++;
		if (i>=PtableLen) i=0;
	}
}

static void initlcd() {
    usleep(20000);
    lcd_writecmd(0x30);
    usleep(20000);
    lcd_writecmd(0x30);
    usleep(20000);
    lcd_writecmd(0x30);

    lcd_writecmd(0x02);
    lcd_writecmd(0x28);
    lcd_writecmd(0x01);
    lcd_writecmd(0x0c);
    lcd_writecmd(0x06);
    lcd_writecmd(0x80);
}

static void lcd_writecmd(char cmd) {
    char data;

    data = (cmd & 0xf0);
    CM3_outport(LCDPort, data | 0x04);
    usleep(10);
    CM3_outport(LCDPort, data);

    usleep(200);

    data = (cmd & 0x0f) << 4;
    CM3_outport(LCDPort, data | 0x04);
    usleep(10);
    CM3_outport(LCDPort, data);

    usleep(2000);
}

static void LCDprint(const char *sptr) {
    while (*sptr != 0) {
        lcddata(*sptr);
        ++sptr;
    }
}

static void lcddata(unsigned char cmd) {
    char data;

    data = (cmd & 0xf0);
    CM3_outport(LCDPort, data | 0x05);
    usleep(10);
    CM3_outport(LCDPort, data);

    usleep(200);

    data = (cmd & 0x0f) << 4;
    CM3_outport(LCDPort, data | 0x05);
    usleep(10);
    CM3_outport(LCDPort, data);

    usleep(2000);
}

unsigned char ScanKey() {
    CM3_outport(KbdPort, Col7Lo);
    ScanCode = CM3_inport(KbdPort);
    ScanCode |= 0x0F;
    ScanCode &= Col7Lo;
    if (ScanCode != Col7Lo) {
        return ProcKey();
    }

    CM3_outport(KbdPort, Col6Lo);
    ScanCode = CM3_inport(KbdPort);
    ScanCode |= 0x0F;
    ScanCode &= Col6Lo;
    if (ScanCode != Col6Lo) {
        return ProcKey();
    }

    CM3_outport(KbdPort, Col5Lo);
    ScanCode = CM3_inport(KbdPort);
    ScanCode |= 0x0F;
    ScanCode &= Col5Lo;
    if (ScanCode != Col5Lo) {
        return ProcKey();
    }

    CM3_outport(KbdPort, Col4Lo);
    ScanCode = CM3_inport(KbdPort);
    ScanCode |= 0x0F;
    ScanCode &= Col4Lo;
    if (ScanCode != Col4Lo) {
        return ProcKey();
    }

    return 0xFF;
}

unsigned char ProcKey() {
    for (unsigned char j = 0; j < 12; j++) {
        if (ScanCode == ScanTable[j]) {
            return (j < 10) ? j + '0' : j + 'A' - 10;
        }
    }
    return 0xFF;
}
